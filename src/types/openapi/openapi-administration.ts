/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/certificate/cfssl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate certificate using CFSSL engine
         * @description This endpoint requires admin access
         */
        post: operations["admin-generate-certificate-cfssl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/certificate/openssl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate certificate using OpenSSL engine
         * @description This endpoint requires admin access
         */
        post: operations["admin-generate-certificate-open-ssl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Load certificate data
         * @description Return all data of root certificate and a field called `generated` with a boolean value.
         *     This endpoint requires admin access
         */
        get: operations["admin-load-certificate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/configure-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check the configuration of LibreSign
         * @description Return the status of necessary configuration and tips to fix the problems.
         *     This endpoint requires admin access
         */
        get: operations["admin-configure-check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/disable-hate-limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Disable hate limit to current session
         * @description This will disable hate limit to current session.
         *     This endpoint requires admin access
         */
        get: operations["admin-disable-hate-limit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/signature-background": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get custom background image
         * @description This endpoint requires admin access
         */
        get: operations["admin-signature-background-get"];
        put?: never;
        /**
         * Add custom background image
         * @description This endpoint requires admin access
         */
        post: operations["admin-signature-background-save"];
        /**
         * Delete background image
         * @description This endpoint requires admin access
         */
        delete: operations["admin-signature-background-delete"];
        options?: never;
        head?: never;
        /**
         * Reset the background image to be the default of LibreSign
         * @description This endpoint requires admin access
         */
        patch: operations["admin-signature-background-reset"];
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/signature-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get parsed signature text service
         * @description This endpoint requires admin access
         */
        get: operations["admin-signature-text-get"];
        put?: never;
        /**
         * Save signature text service
         * @description This endpoint requires admin access
         */
        post: operations["admin-signature-text-save"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/signature-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get signature settings
         * @description This endpoint requires admin access
         */
        get: operations["admin-get-signature-settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/signer-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Convert signer name as image
         * @description This endpoint requires admin access
         */
        get: operations["admin-signer-name"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/certificate-policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update certificate policy of this instance
         * @description This endpoint requires admin access
         */
        post: operations["admin-save-certificate-policy"];
        /**
         * Delete certificate policy of this instance
         * @description This endpoint requires admin access
         */
        delete: operations["admin-delete-certificate-policy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/admin/certificate-policy/oid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update OID
         * @description This endpoint requires admin access
         */
        post: operations["admin-updateoid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/setting/has-root-cert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Has root certificate
         * @description Checks whether the root certificate has been configured by checking the Nextcloud configuration table to see if the root certificate settings have
         */
        get: operations["setting-has-root-cert"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Capabilities: {
            features: string[];
            config: {
                "sign-elements": {
                    "is-available": boolean;
                    "can-create-signature": boolean;
                    /** Format: double */
                    "full-signature-width": number;
                    /** Format: double */
                    "full-signature-height": number;
                    /** Format: double */
                    "signature-width": number;
                    /** Format: double */
                    "signature-height": number;
                };
            };
            version: string;
        };
        CetificateDataGenerated: components["schemas"]["EngineHandler"] & {
            generated: boolean;
        };
        ConfigureCheck: {
            message: string;
            resource: string;
            /** @enum {string} */
            status: "error" | "success";
            tip: string;
        };
        EngineHandler: {
            configPath: string;
            cfsslUri?: string;
            policySection: components["schemas"]["PolicySection"][];
            rootCert: components["schemas"]["RootCertificate"];
        };
        OCSMeta: {
            status: string;
            statuscode: number;
            message?: string;
            totalitems?: string;
            itemsperpage?: string;
        };
        PolicySection: {
            OID: string;
            CPS: string;
        };
        PublicCapabilities: {
            libresign?: components["schemas"]["Capabilities"];
        };
        RootCertificate: {
            commonName: string;
            names: components["schemas"]["RootCertificateName"][];
        };
        RootCertificateName: {
            id: string;
            value: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    "admin-generate-certificate-cfssl": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description fields of root certificate */
                    rootCert: {
                        commonName: string;
                        names: {
                            [key: string]: {
                                value: string;
                            };
                        };
                    };
                    /**
                     * @description URI of CFSSL API
                     * @default
                     */
                    cfsslUri?: string;
                    /**
                     * @description Path of config files of CFSSL
                     * @default
                     */
                    configPath?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                data: components["schemas"]["EngineHandler"];
                            };
                        };
                    };
                };
            };
            /** @description Account not found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-generate-certificate-open-ssl": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description fields of root certificate */
                    rootCert: {
                        commonName: string;
                        names: {
                            [key: string]: {
                                value: string;
                            };
                        };
                    };
                    /**
                     * @description Path of config files of CFSSL
                     * @default
                     */
                    configPath?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                data: components["schemas"]["EngineHandler"];
                            };
                        };
                    };
                };
            };
            /** @description Account not found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-load-certificate": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["CetificateDataGenerated"];
                        };
                    };
                };
            };
        };
    };
    "admin-configure-check": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ConfigureCheck"][];
                        };
                    };
                };
            };
        };
    };
    "admin-disable-hate-limit": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "admin-signature-background-get": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    "admin-signature-background-save": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "success";
                            };
                        };
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "failure";
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-signature-background-delete": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted with success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "success";
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-signature-background-reset": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image reseted to default */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "success";
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-signature-text-get": {
        parameters: {
            query?: {
                /** @description Template to signature text */
                template?: string;
                /** @description Context for parsing the template */
                context?: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                template: string;
                                parsed: string;
                                /** Format: double */
                                templateFontSize: number;
                                /** Format: double */
                                signatureFontSize: number;
                                /** Format: double */
                                signatureWidth: number;
                                /** Format: double */
                                signatureHeight: number;
                                renderMode: string;
                            };
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-signature-text-save": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Template to signature text */
                    template: string;
                    /**
                     * Format: double
                     * @description Font size used when print the parsed text of this template at PDF file
                     * @default 10
                     */
                    templateFontSize?: number;
                    /**
                     * Format: double
                     * @description Font size used when the signature mode is SIGNAME_AND_DESCRIPTION
                     * @default 20
                     */
                    signatureFontSize?: number;
                    /**
                     * Format: double
                     * @description Signature width
                     * @default 350
                     */
                    signatureWidth?: number;
                    /**
                     * Format: double
                     * @description Signature height
                     * @default 100
                     */
                    signatureHeight?: number;
                    /**
                     * @description Signature render mode
                     * @default GRAPHIC_AND_DESCRIPTION
                     */
                    renderMode?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                template: string;
                                parsed: string;
                                /** Format: double */
                                templateFontSize: number;
                                /** Format: double */
                                signatureFontSize: number;
                                /** Format: double */
                                signatureWidth: number;
                                /** Format: double */
                                signatureHeight: number;
                                renderMode: string;
                            };
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-get-signature-settings": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                default_signature_text_template: string;
                                signature_available_variables: {
                                    [key: string]: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-signer-name": {
        parameters: {
            query: {
                /** @description Image width, */
                width: number;
                /** @description Image height */
                height: number;
                /** @description Text to be added to image */
                text: string;
                /** @description Font size of text */
                fontSize: number;
                /** @description Color of text, white if is tark theme and black if not */
                isDarkTheme: 0 | 1;
                /** @description Align of text: left, center or right */
                align: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "Content-Disposition"?: "inline; filename=\"signer-name.png\"";
                    [name: string]: unknown;
                };
                content: {
                    "image/png": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                error: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-save-certificate-policy": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "success";
                                CPS: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "failure";
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "admin-delete-certificate-policy": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    "admin-updateoid": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description OID is a unique numeric identifier for certificate policies in digital certificates. */
                    oid: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "success";
                            };
                        };
                    };
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** @enum {string} */
                                status: "failure";
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "setting-has-root-cert": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                hasRootCert: boolean;
                            };
                        };
                    };
                };
            };
        };
    };
}
