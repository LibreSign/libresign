/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/index.php/apps/libresign/certificate-policy.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Certificate policy of this instance */
        get: operations["certificate_policy-get-certificate-policy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/develop/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a demo PDF file to be used by test purpose
         * @description To use this endpoint is necessary to enable the debug mode in your instance. To do this, run the command:
         *     `occ config:system:set debug --value true --type boolean`
         */
        get: operations["develop-pdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Index page */
        get: operations["page-index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/f": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Index page to authenticated users
         * @description This router is used to be possible render pages with /f/, is a workaround at frontend side to identify pages with authenticated accounts
         */
        get: operations["page-indexf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/f/incomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Incomplete page */
        get: operations["page-incomplete"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/incomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Incomplete page in full screen */
        get: operations["page-incompletep"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/f/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Main page to authenticated signer with a path
         * @description The path is used only by frontend
         */
        get: operations["page-indexf-path"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/f/sign/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Sign page to authenticated signer */
        get: operations["page-signf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/f/sign/{uuid}/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sign page to authenticated signer with the path of file
         * @description The path is used only by frontend
         */
        get: operations["page-signf-path"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/sign/{uuid}/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sign page to unauthenticated signer
         * @description The path is used only by frontend
         */
        get: operations["page-signp-path"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/sign/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sign page to unauthenticated signer
         * @description The path is used only by frontend
         */
        get: operations["page-sign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/account/files/approve/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show signature page */
        get: operations["page-sign-account-file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/account/files/approve/{uuid}/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show signature page */
        get: operations["page-sign-account-file-private"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/pdf/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Use UUID of file to get PDF */
        get: operations["page-get-pdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/pdf/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Use UUID of user to get PDF */
        get: operations["page-get-pdf-file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show validation page */
        get: operations["page-validation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/validation/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show validation page
         * @description The path is used only by frontend
         */
        get: operations["page-validation-file-with-short-url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show validation page */
        get: operations["page-reset-password"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/apps/libresign/p/validation/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Public page to show validation for a specific file UUID */
        get: operations["page-validation-file-public"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/create/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create account to sign a document */
        post: operations["account-create-to-sign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/signature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create PFX file using self-signed certificate */
        post: operations["account-signature-generate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List account files of authenticated account */
        get: operations["account-account-file-list-to-owner"];
        put?: never;
        /** Add files to account profile */
        post: operations["account-add-files"];
        /** Delete file from account */
        delete: operations["account-delete-file"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Who am I
         * @description Validates API access data and returns the authenticated user's data.
         */
        get: operations["account-me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/files/approval/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List account files that need to be approved */
        get: operations["account-account-file-list-to-approval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the account phone number */
        patch: operations["account-update-settings"];
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/pfx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload PFX file */
        post: operations["account-upload-pfx"];
        /** Delete PFX file */
        delete: operations["account-delete-pfx"];
        options?: never;
        head?: never;
        /**
         * Update PFX file
         * @description Used to change the password of PFX file
         */
        patch: operations["account-update-pfx-password"];
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/pfx/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Read content of PFX file */
        post: operations["account-read-pfx-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/validate/uuid/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate a file using Uuid
         * @description Validate a file returning file data.
         */
        get: operations["file-validate-uuid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/validate/file_id/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate a file using FileId
         * @description Validate a file returning file data.
         */
        get: operations["file-validate-file-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate a binary file
         * @description Validate a binary file returning file data. Use field 'file' for the file upload
         */
        post: operations["file-validate-binary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List account files that need to be approved */
        get: operations["file-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/thumbnail/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the thumbnail of a LibreSign file */
        get: operations["file-get-thumbnail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a file
         * @description Send a new file to Nextcloud and return the fileId to request to sign usign fileId
         */
        post: operations["file-save"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/file_id/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete File
         * @description This will delete the file and all data
         */
        delete: operations["file-delete-all-request-signature-using-file-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file-element/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create visible element
         * @description Create visible element of a specific file
         */
        post: operations["file_element-post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/file-element/{uuid}/{elementId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete visible element
         * @description Delete visible element of a specific file
         */
        delete: operations["file_element-delete"];
        options?: never;
        head?: never;
        /**
         * Update visible element
         * @description Update visible element of a specific file
         */
        patch: operations["file_element-patch"];
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/identify-account/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List possible signers
         * @description Used to identify who can sign the document. The return of this endpoint is related with Administration Settiongs > LibreSign > Identify method.
         */
        get: operations["identify_account-search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/notify/signers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Notify signers of a file */
        post: operations["notify-signers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/notify/signer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Notify a signer of a file */
        post: operations["notify-signer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/notify/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Dismiss a specific notification */
        delete: operations["notify-notification-dismiss"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/request-signature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request signature
         * @description Request that a file be signed by a group of people
         */
        post: operations["request_signature-request"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Updates signatures data
         * @description Is necessary to inform the UUID of the file and a list of people
         */
        patch: operations["request_signature-update-sign"];
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/file_id/{fileId}/{signRequestId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete sign request
         * @description You can only request exclusion as any sign
         */
        delete: operations["request_signature-delete-one-request-signature-using-file-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/file_id/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign a file using file Id */
        post: operations["sign_file-sign-using-file-id"];
        /**
         * Delete sign request
         * @description You can only request exclusion as any sign
         */
        delete: operations["request_signature-delete-all-request-signature-using-file-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/uuid/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign a file using file UUID */
        post: operations["sign_file-sign-using-uuid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/uuid/{uuid}/renew/{method}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Renew the signature method */
        post: operations["sign_file-sign-renew"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/uuid/{uuid}/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get code to sign the document using UUID */
        post: operations["sign_file-get-code-using-uuid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/file_id/{fileId}/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get code to sign the document using FileID */
        post: operations["sign_file-get-code-using-file-id"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/signature/elements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get signature elements */
        get: operations["signature_elements-get-signature-elements"];
        put?: never;
        /** Create signature element */
        post: operations["signature_elements-create-signature-element"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/signature/elements/preview/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get preview of signature elements of */
        get: operations["signature_elements-get-signature-element-preview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/libresign/api/{apiVersion}/signature/elements/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get signature element of signer */
        get: operations["signature_elements-get-signature-element"];
        put?: never;
        post?: never;
        /** Delete signature element */
        delete: operations["signature_elements-delete-signature-element"];
        options?: never;
        head?: never;
        /** Update signature element */
        patch: operations["signature_elements-patch-signature-element"];
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        AccountFile: {
            file: components["schemas"]["NewFile"];
            name?: string;
            type?: string;
        };
        Capabilities: {
            features: string[];
            config: {
                "sign-elements": {
                    "is-available": boolean;
                    "can-create-signature": boolean;
                    /** Format: double */
                    "full-signature-width": number;
                    /** Format: double */
                    "full-signature-height": number;
                    /** Format: double */
                    "signature-width": number;
                    /** Format: double */
                    "signature-height": number;
                };
            };
            version: string;
        };
        CertificatePfxData: {
            name: string;
            subject: string;
            issuer: string;
            extensions: string;
            validate: {
                from: string;
                to: string;
            };
        };
        Coordinate: {
            /** Format: int64 */
            page?: number;
            /** Format: int64 */
            urx?: number;
            /** Format: int64 */
            ury?: number;
            /** Format: int64 */
            llx?: number;
            /** Format: int64 */
            lly?: number;
            /** Format: int64 */
            top?: number;
            /** Format: int64 */
            left?: number;
            /** Format: int64 */
            width?: number;
            /** Format: int64 */
            height?: number;
        };
        File: {
            account: {
                userId: string;
                displayName: string;
            };
            file_type: {
                type: string;
                name: string;
                description: string | null;
            };
            created_at: string;
            file: {
                name: string;
                /**
                 * Format: int64
                 * @enum {integer}
                 */
                status: 0 | 1 | 2 | 3 | 4;
                statusText: string;
                created_at: string;
                file: {
                    type: string;
                    /** Format: int64 */
                    nodeId: number;
                    /** Format: int64 */
                    signedNodeId: number;
                    url: string;
                };
                callback: string | null;
                uuid: string;
                signers: components["schemas"]["Signer"][];
            };
        };
        FolderSettings: {
            folderName?: string;
            separator?: string;
            folderPatterns?: {
                name: string;
                setting?: string;
            };
        };
        IdentifyAccount: {
            /** Format: int64 */
            id: number;
            isNoUser: boolean;
            displayName: string;
            subname: string;
            /**
             * Format: int64
             * @enum {integer}
             */
            shareType: 0 | 4;
            /** @enum {string} */
            icon?: "icon-mail" | "icon-user";
        };
        IdentifyMethod: {
            /** @enum {string} */
            method: "email" | "account";
            value: string;
            /** Format: int64 */
            mandatory: number;
        };
        NewFile: {
            base64?: string;
            /** Format: int64 */
            fileId?: number;
            url?: string;
        };
        NewSigner: {
            identify: {
                email?: string;
                account?: string;
            };
        };
        NextcloudFile: {
            message: string;
            name: string;
            /** Format: int64 */
            id: number;
            etag: string;
            path: string;
            type: string;
        };
        Notify: {
            date: string;
            /** @enum {string} */
            method: "activity" | "notify" | "mail";
        };
        OCSMeta: {
            status: string;
            statuscode: number;
            message?: string;
            totalitems?: string;
            itemsperpage?: string;
        };
        Pagination: {
            /** Format: int64 */
            total: number;
            current: string | null;
            next: string | null;
            prev: string | null;
            last: string | null;
            first: string | null;
        };
        PublicCapabilities: {
            libresign?: components["schemas"]["Capabilities"];
        };
        Settings: {
            canSign: boolean;
            canRequestSign: boolean;
            signerFileUuid: string | null;
            hasSignatureFile?: boolean;
            phoneNumber: string;
            needIdentificationDocuments?: boolean;
            identificationDocumentsWaitingApproval?: boolean;
        };
        SignatureMethod: {
            enabled: boolean;
            label: string;
            name: string;
        };
        SignatureMethodEmailToken: {
            label: string;
            /** @enum {string} */
            identifyMethod: "email" | "account";
            needCode: boolean;
            hasConfirmCode: boolean;
            blurredEmail: string;
            hashOfEmail: string;
        };
        SignatureMethodPassword: {
            label: string;
            name: string;
            hasSignatureFile: boolean;
        };
        SignatureMethods: {
            clickToSign?: components["schemas"]["SignatureMethod"];
            emailToken?: components["schemas"]["SignatureMethodEmailToken"];
            password?: components["schemas"]["SignatureMethodPassword"];
        };
        Signer: {
            description: string | null;
            displayName: string;
            subject?: string;
            request_sign_date: string;
            /** Format: int64 */
            valid_from?: number;
            /** Format: int64 */
            valid_to?: number;
            email?: string;
            remote_address?: string;
            user_agent?: string;
            notify?: components["schemas"]["Notify"][];
            userId?: string;
            signed: string | null;
            sign_date?: string | null;
            sign_uuid?: string;
            hash_algorithm?: string;
            me: boolean;
            /** Format: int64 */
            signRequestId: number;
            identifyMethods?: components["schemas"]["IdentifyMethod"][];
            visibleElements?: components["schemas"]["VisibleElement"][];
            signatureMethods?: components["schemas"]["SignatureMethods"];
        };
        UserElement: {
            /** Format: int64 */
            id: number;
            type: string;
            file: {
                url: string;
                /** Format: int64 */
                nodeId: number;
            };
            userId: string;
            /**
             * Format: int64
             * @enum {integer}
             */
            starred: 0 | 1;
            createdAt: string;
        };
        ValidateFile: {
            uuid: string;
            name: string;
            /**
             * Format: int64
             * @enum {integer}
             */
            status: 0 | 1 | 2 | 3 | 4;
            statusText: string;
            /** Format: int64 */
            nodeId: number;
            /** Format: int64 */
            totalPages: number;
            /** Format: int64 */
            size: number;
            pdfVersion: string;
            created_at: string;
            requested_by: {
                userId: string;
                displayName: string;
            };
            file: string;
            url?: string;
            signers?: components["schemas"]["Signer"][];
            settings?: components["schemas"]["Settings"];
            messages?: {
                /** @enum {string} */
                type: "info";
                message: string;
            }[];
            visibleElements?: components["schemas"]["VisibleElement"][];
        };
        VisibleElement: {
            /** Format: int64 */
            elementId: number;
            /** Format: int64 */
            signRequestId: number;
            type: string;
            coordinates: components["schemas"]["Coordinate"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    "certificate_policy-get-certificate-policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "Content-Disposition"?: "inline; filename=\"certificate-policy.pdf\"";
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "develop-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PDF returned */
            200: {
                headers: {
                    "Content-Disposition"?: "inline; filename=\"file.pdf\"";
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
            /** @description Debug mode not enabled */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "page-index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-indexf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-incomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-incompletep": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-indexf-path": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The path that was sent from frontend */
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-signf": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-signf-path": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-signp-path": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-sign": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-sign-account-file": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-sign-account-file-private": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-get-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description File uuid */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "page-get-pdf-file": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Sign request uuid */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    "page-validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-validation-file-with-short-url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "page-validation-file-public": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description File uuid */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    "account-create-to-sign": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Sign request uuid to allow account creation */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description email to the new account */
                    email: string;
                    /** @description the password to then new account */
                    password: string;
                    /** @description The password to create certificate */
                    signPassword?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /**
                                 * Format: int64
                                 * @enum {integer}
                                 */
                                action: 2000 | 2500;
                                description?: string | null;
                                filename?: string;
                                message: string;
                                pdf?: {
                                    url: string;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Validation page not accessible if unauthenticated */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                                /** Format: int64 */
                                action: number;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-signature-generate": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The password that will be used to encrypt the certificate file */
                    signPassword: string;
                };
            };
        };
        responses: {
            /** @description Settings saved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: Record<string, never>;
                        };
                    };
                };
            };
            /** @description Failure to create PFX file */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-account-file-list-to-owner": {
        parameters: {
            query?: {
                /** @description Filter params */
                filter?: string | null;
                /** @description the number of page to return */
                page?: number | null;
                /** @description Total of elements to return */
                length?: number | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate saved with success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                pagination: components["schemas"]["Pagination"];
                                data: components["schemas"]["File"][];
                            };
                        };
                    };
                };
            };
            /** @description No file provided or other problem with provided file */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-add-files": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The list of files to add to profile */
                    files: components["schemas"]["AccountFile"][];
                };
            };
        };
        responses: {
            /** @description Certificate saved with success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description No file provided or other problem with provided file */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                file: number | null;
                                /** @enum {string} */
                                type: "info" | "warning" | "danger";
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-delete-file": {
        parameters: {
            query: {
                /** @description the nodeId of file to be delete */
                nodeId: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File deleted with success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Failure to delete file from account */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                messages: string[];
                            };
                        };
                    };
                };
            };
        };
    };
    "account-me": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                account: {
                                    uid: string;
                                    emailAddress: string;
                                    displayName: string;
                                };
                                settings: {
                                    canRequestSign: boolean;
                                    hasSignatureFile: boolean;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Invalid user or password */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-account-file-list-to-approval": {
        parameters: {
            query?: {
                /** @description Filter params */
                filter?: string | null;
                /** @description the number of page to return */
                page?: number | null;
                /** @description Total of elements to return */
                length?: number | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                pagination: components["schemas"]["Pagination"];
                                data: components["schemas"]["File"][] | null;
                            };
                        };
                    };
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-update-settings": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description the phone number to be defined. If null will remove the phone number */
                    phone?: string | null;
                };
            };
        };
        responses: {
            /** @description Settings saved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                data: {
                                    userId: string;
                                    phone: string;
                                    message: string;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Invalid data to update phone number */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-upload-pfx": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate saved with success */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description No file provided or other problem with provided file */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-delete-pfx": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate deleted with success */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-update-pfx-password": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Current password */
                    current: string;
                    /** @description New password */
                    new: string;
                };
            };
        };
        responses: {
            /** @description Certificate saved with success */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description No file provided or other problem with provided file */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "account-read-pfx-data": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description password of PFX file to decrypt the file and return his content */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Certificate saved with success */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["CertificatePfxData"];
                        };
                    };
                };
            };
            /** @description No file provided or other problem with provided file */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "file-validate-uuid": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description The UUID of the LibreSign file */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ValidateFile"];
                        };
                    };
                };
            };
            /** @description Request failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                                messages?: {
                                    type: string;
                                    message: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "file-validate-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description The identifier value of the LibreSign file */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ValidateFile"];
                        };
                    };
                };
            };
            /** @description Request failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                                messages?: {
                                    type: string;
                                    message: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "file-validate-binary": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ValidateFile"];
                        };
                    };
                };
            };
            /** @description Request failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                                messages?: {
                                    type: string;
                                    message: string;
                                }[];
                                message?: string;
                            };
                        };
                    };
                };
            };
            /** @description Request failed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                                messages?: {
                                    type: string;
                                    message: string;
                                }[];
                                message?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "file-list": {
        parameters: {
            query?: {
                /** @description the number of page to return */
                page?: number | null;
                /** @description Total of elements to return */
                length?: number | null;
                /** @description Signer UUID */
                signer_uuid?: string | null;
                /** @description The list of nodeIds (also called fileIds). It's the ids of files at Nextcloud */
                "nodeIds[]"?: string[] | null;
                /** @description Status could be none or many of 0 = draft, 1 = able to sign, 2 = partial signed, 3 = signed, 4 = deleted. */
                "status[]"?: number[] | null;
                /** @description Start date of signature request (UNIX timestamp) */
                start?: number | null;
                /** @description End date of signature request (UNIX timestamp) */
                end?: number | null;
                /** @description Name of the column to sort by */
                sortBy?: string | null;
                /** @description Ascending or descending order */
                sortDirection?: string | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                pagination: components["schemas"]["Pagination"];
                                data: components["schemas"]["File"][] | null;
                            };
                        };
                    };
                };
            };
        };
    };
    "file-get-thumbnail": {
        parameters: {
            query?: {
                /** @description Width of generated file */
                x?: number;
                /** @description Height of generated file */
                y?: number;
                /** @description Crop, boolean value, default false */
                a?: 0 | 1;
                /** @description Force to generate a new thumbnail */
                forceIcon?: 0 | 1;
                /** @description To force a given mimetype for the file */
                mode?: string;
                /** @description If we have no preview enabled, we can redirect to the mime icon if any */
                mimeFallback?: 0 | 1;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description The nodeId of document */
                nodeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Redirect */
            303: {
                headers: {
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "file-save": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description File to save */
                    file: components["schemas"]["NewFile"];
                    /**
                     * @description The name of file to sign
                     * @default
                     */
                    name?: string;
                    /**
                     * @description Settings to define the pattern to store the file. See more informations at FolderService::getFolderName method.
                     * @default []
                     */
                    settings?: components["schemas"]["FolderSettings"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["NextcloudFile"];
                        };
                    };
                };
            };
            /** @description Failed to save data */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "file-delete-all-request-signature-using-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "file_element-post": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Id of sign request
                     */
                    signRequestId: number;
                    /**
                     * Format: int64
                     * @description ID of visible element. Each element has an ID that is returned on validation endpoints.
                     */
                    elementId?: number | null;
                    /**
                     * @description The type of element to create, sginature, sinitial, date, datetime, text
                     * @default
                     */
                    type?: string;
                    /**
                     * @description Metadata of visible elements to associate with the document
                     * @default {}
                     */
                    metadata?: Record<string, never>;
                    /**
                     * @description Coortinates of a visible element on PDF
                     * @default []
                     */
                    coordinates?: components["schemas"]["Coordinate"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                fileElementId: number;
                            };
                        };
                    };
                };
            };
            /** @description Failure when create visible element */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "file_element-delete": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
                uuid: string;
                /** @description ID of visible element. Each element has an ID that is returned on validation endpoints. */
                elementId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Failure when delete visible element or file not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "file_element-patch": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
                uuid: string;
                /** @description ID of visible element. Each element has an ID that is returned on validation endpoints. */
                elementId: number | null;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Id of sign request
                     */
                    signRequestId: number;
                    /**
                     * @description The type of element to create, sginature, sinitial, date, datetime, text
                     * @default
                     */
                    type?: string;
                    /**
                     * @description Metadata of visible elements to associate with the document
                     * @default {}
                     */
                    metadata?: Record<string, never>;
                    /**
                     * @description Coortinates of a visible element on PDF
                     * @default []
                     */
                    coordinates?: components["schemas"]["Coordinate"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                fileElementId: number;
                            };
                        };
                    };
                };
            };
            /** @description Failure when patch visible element */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "identify_account-search": {
        parameters: {
            query?: {
                /** @description search params */
                search?: string;
                /** @description the number of page to return. Default: 1 */
                page?: number;
                /** @description Total of elements to return. Default: 25 */
                limit?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate saved with success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["IdentifyAccount"][];
                        };
                    };
                };
            };
        };
    };
    "notify-signers": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description The identifier value of LibreSign file
                     */
                    fileId: number;
                    /** @description Signers data */
                    signers: {
                        email: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                messages: {
                                    /** @enum {string} */
                                    type: "danger";
                                    message: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "notify-signer": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description The identifier value of LibreSign file
                     */
                    fileId: number;
                    /**
                     * Format: int64
                     * @description The sign request id
                     */
                    signRequestId: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                messages: {
                                    /** @enum {string} */
                                    type: "danger";
                                    message: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "notify-notification-dismiss": {
        parameters: {
            query: {
                /** @description The type of object */
                objectType: string;
                /** @description The identifier value of LibreSign file */
                objectId: number;
                /** @description The subject of notification */
                subject: string;
                /** @description Timestamp of notification to dismiss */
                timestamp: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    "request_signature-request": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description File object. */
                    file: components["schemas"]["NewFile"];
                    /** @description Collection of users who must sign the document */
                    users: components["schemas"]["NewSigner"][];
                    /** @description The name of file to sign */
                    name: string;
                    /** @description URL that will receive a POST after the document is signed */
                    callback?: string | null;
                    /**
                     * Format: int64
                     * @description Numeric code of status * 0 - no signers * 1 - signed * 2 - pending
                     * @default 1
                     */
                    status?: number | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                data: components["schemas"]["ValidateFile"];
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Unauthorized */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message?: string;
                                /** Format: int64 */
                                action?: number;
                                errors?: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "request_signature-update-sign": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Collection of users who must sign the document
                     * @default []
                     */
                    users?: components["schemas"]["NewSigner"][] | null;
                    /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
                    uuid?: string | null;
                    /** @description Visible elements on document */
                    visibleElements?: components["schemas"]["VisibleElement"][] | null;
                    /**
                     * @description File object.
                     * @default []
                     */
                    file?: (components["schemas"]["NewFile"] | unknown[]) | null;
                    /**
                     * Format: int64
                     * @description Numeric code of status * 0 - no signers * 1 - signed * 2 - pending
                     */
                    status?: number | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                                data: components["schemas"]["ValidateFile"];
                            };
                        };
                    };
                };
            };
            /** @description Unauthorized */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message?: string;
                                /** Format: int64 */
                                action?: number;
                                errors?: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "request_signature-delete-one-request-signature-using-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                fileId: number;
                /** @description The sign request id */
                signRequestId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "sign_file-sign-using-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Id of LibreSign file */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Signature method */
                    method: string;
                    /**
                     * @description List of visible elements
                     * @default {}
                     */
                    elements?: {
                        [key: string]: Record<string, never>;
                    };
                    /**
                     * @description Identify value
                     * @default
                     */
                    identifyValue?: string;
                    /**
                     * @description Token, commonly send by email
                     * @default
                     */
                    token?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                message: string;
                                file: {
                                    uuid: string;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                                redirect?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "request_signature-delete-all-request-signature-using-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "sign_file-sign-using-uuid": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description UUID of LibreSign file */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Signature method */
                    method: string;
                    /**
                     * @description List of visible elements
                     * @default {}
                     */
                    elements?: {
                        [key: string]: Record<string, never>;
                    };
                    /**
                     * @description Identify value
                     * @default
                     */
                    identifyValue?: string;
                    /**
                     * @description Token, commonly send by email
                     * @default
                     */
                    token?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                message: string;
                                file: {
                                    uuid: string;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                action: number;
                                errors: {
                                    message: string;
                                    title?: string;
                                }[];
                                redirect?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "sign_file-sign-renew": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                uuid: string;
                /** @description Signature method */
                method: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "sign_file-get-code-using-uuid": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description UUID of LibreSign file */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "sign_file-get-code-using-file-id": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Id of LibreSign file */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Identify signer method
                     * @enum {string|null}
                     */
                    identifyMethod?: "account" | "email" | null;
                    /** @description Method used to sign the document */
                    signMethod?: string | null;
                    /** @description Identify value, i.e. the signer email, account or phone number */
                    identify?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "signature_elements-get-signature-elements": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                elements: components["schemas"]["UserElement"][];
                            };
                        };
                    };
                };
            };
            /** @description Invalid data */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "signature_elements-create-signature-element": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Element object */
                    elements: {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                elements: components["schemas"]["UserElement"][];
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Invalid data */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "signature_elements-get-signature-element-preview": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                nodeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Invalid data */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    "signature_elements-get-signature-element": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                nodeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["UserElement"];
                        };
                    };
                };
            };
            /** @description Invalid data */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "signature_elements-delete-signature-element": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                nodeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "signature_elements-patch-signature-element": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                apiVersion: "v1";
                /** @description Node id of a Nextcloud file */
                nodeId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The type of signature element
                     * @default
                     */
                    type?: string;
                    /**
                     * @description Element object
                     * @default {}
                     */
                    file?: {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                elements: components["schemas"]["UserElement"][];
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
}
