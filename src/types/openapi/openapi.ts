/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/index.php/apps/libresign/develop/pdf": {
    /** Get a demo PDF file to be used by test purpose */
    get: operations["develop-pdf"];
  };
  "/index.php/apps/libresign": {
    /** Index page */
    get: operations["page-index"];
  };
  "/index.php/apps/libresign/f": {
    /**
     * Index page to authenticated users
     * @description This router is used to be possible render pages with /f/, is a workaround at frontend side to identify pages with authenticated accounts
     */
    get: operations["page-indexf"];
  };
  "/index.php/apps/libresign/f/incomplete": {
    /** Incomplete page */
    get: operations["page-incomplete"];
  };
  "/index.php/apps/libresign/f/sign/{uuid}/{path}": {
    /**
     * Sign page to authenticated signer with the path of file
     * @description The path is used only by frontend
     */
    get: operations["page-signf-path-extra"];
  };
  "/index.php/apps/libresign/f/sign/{uuid}": {
    /** Sign page to authenticated signer */
    get: operations["page-signf"];
  };
  "/index.php/apps/libresign/f/{path}": {
    /**
     * Main page to authenticated signer with a path
     * @description The path is used only by frontend
     */
    get: operations["page-indexf-path-front"];
  };
  "/index.php/apps/libresign/pdf/{uuid}": {
    /** Use UUID of user to get PDF */
    get: operations["page-get-pdf-file"];
  };
  "/index.php/apps/libresign/reset-password": {
    /** Show validation page */
    get: operations["page-reset-password"];
  };
  "/index.php/apps/libresign/p/incomplete": {
    /** Incomplete page in full screen */
    get: operations["page-incompletep"];
  };
  "/index.php/apps/libresign/p/sign/{uuid}": {
    /**
     * Sign page to authenticated signer
     * @description The path is used only by frontend
     */
    get: operations["page-sign"];
  };
  "/index.php/apps/libresign/p/sign/{uuid}/{path}": {
    /**
     * Sign page to authenticated signer
     * @description The path is used only by frontend
     */
    get: operations["page-sign-extra"];
  };
  "/index.php/apps/libresign/p/account/files/approve/{uuid}": {
    /** Show signature page */
    get: operations["page-sign-account-file"];
  };
  "/index.php/apps/libresign/p/account/files/approve/{uuid}/{path}": {
    /** Show signature page */
    get: operations["page-sign-account-file-extra"];
  };
  "/index.php/apps/libresign/p/validation": {
    /** Show validation page */
    get: operations["page-validation"];
  };
  "/index.php/apps/libresign/validation/{uuid}": {
    /**
     * Show validation page
     * @description The path is used only by frontend
     */
    get: operations["page-validation-file-with-short-url"];
  };
  "/index.php/apps/libresign/p/validation/{uuid}": {
    /** Show validation page for a specific file UUID */
    get: operations["page-validation-file"];
  };
  "/index.php/apps/libresign/p/pdf/{uuid}": {
    /** Use UUID of file to get PDF */
    get: operations["page-get-pdf"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/create/{uuid}": {
    /** Create account to sign a document */
    post: operations["account-create-to-sign"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/me": {
    /**
     * Who am I
     * @description Validates API access data and returns the authenticated user's data.
     */
    get: operations["account-me"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/pfx": {
    /** Upload PFX file */
    post: operations["account-upload-pfx"];
    /** Delete PFX file */
    delete: operations["account-delete-pfx"];
    /**
     * Update PFX file
     * @description Used to change the password of PFX file
     */
    patch: operations["account-update-pfx-password"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/pfx/read": {
    /** Read content of PFX file */
    post: operations["account-read-pfx-data"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/settings": {
    /** Update the account phone number */
    patch: operations["account-update-settings"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/signature": {
    /** Create PFX file using self-signed certificate */
    post: operations["account-signature-generate"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/files": {
    /** List account files of authenticated account */
    get: operations["account-account-file-list-to-owner"];
    /** Add files to account profile */
    post: operations["account-add-files"];
    /** Delete file from account */
    delete: operations["account-delete-file"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/account/files/approval/list": {
    /** List account files that need to be approved */
    get: operations["account-account-file-list-to-approval"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file": {
    /**
     * Send a file
     * @description Send a new file to Nextcloud and return the fileId to request to sign usign fileId
     */
    post: operations["file-save"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/list": {
    /** List account files that need to be approved */
    get: operations["file-list"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/thumbnail/{nodeId}": {
    /** Return the thumbnail of a LibreSign file */
    get: operations["file-get-thumbnail"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/validate": {
    /**
     * Validate a file
     * @description Validate a file returning file data.
     */
    get: operations["file-validate"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/validate/uuid/{uuid}": {
    /**
     * Validate a file using Uuid
     * @description Validate a file returning file data.
     */
    get: operations["file-validate-uuid"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file/validate/file_id/{fileId}": {
    /**
     * Validate a file using FileId
     * @description Validate a file returning file data.
     */
    get: operations["file-validate-file-id"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file-element/{uuid}": {
    /**
     * Create visible element
     * @description Create visible element of a specific file
     */
    post: operations["file_element-post"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/file-element/{uuid}/{elementId}": {
    /**
     * Delete visible element
     * @description Delete visible element of a specific file
     */
    delete: operations["file_element-delete"];
    /**
     * Update visible element
     * @description Update visible element of a specific file
     */
    patch: operations["file_element-patch"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/identify-account/search": {
    /**
     * List possible signers
     * @description Used to identify who can sign the document. The return of this endpoint is related with Administration Settiongs > LibreSign > Identify method.
     */
    get: operations["identify_account-search"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/notify/signer": {
    /** Notify a signer of a file */
    post: operations["notify-signer"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/notify/signers": {
    /** Notify signers of a file */
    post: operations["notify-signers"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/notif/notification": {
    /** Dismiss a specific notification */
    delete: operations["notify-notification-dismiss"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/request-signature": {
    /**
     * Request signature
     * @description Request that a file be signed by a group of people
     */
    post: operations["request_signature-request"];
    /**
     * Updates signatures data
     * @description Is necessary to inform the UUID of the file and a list of people
     */
    patch: operations["request_signature-update-sign"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/file_id/{fileId}": {
    /** Sign a file using file Id */
    post: operations["sign_file-sign-using-file-id"];
    /**
     * Delete sign request
     * @description You can only request exclusion as any sign
     */
    delete: operations["request_signature-delete-all-request-signature-using-file-id"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/file_id/{fileId}/{signRequestId}": {
    /**
     * Delete sign request
     * @description You can only request exclusion as any sign
     */
    delete: operations["request_signature-delete-one-request-signature-using-file-id"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/setting/has-root-cert": {
    /**
     * Has root certificate
     * @description Checks whether the root certificate has been configured by checking the Nextcloud configuration table to see if the root certificate settings have
     */
    get: operations["setting-has-root-cert"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/signature/elements": {
    /** Get signature elements */
    get: operations["signature_elements-get-signature-elements"];
    /** Create signature element */
    post: operations["signature_elements-create-signature-element"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/signature/elements/preview/{nodeId}": {
    /** Get preview of signature elements of */
    get: operations["signature_elements-get-signature-element-preview"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/signature/elements/{nodeId}": {
    /** Get signature element of signer */
    get: operations["signature_elements-get-signature-element"];
    /** Delete signature element */
    delete: operations["signature_elements-delete-signature-element"];
    /** Update signature element */
    patch: operations["signature_elements-patch-signature-element"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/uuid/{uuid}": {
    /** Sign a file using file UUID */
    post: operations["sign_file-sign-using-uuid"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/uuid/{uuid}/renew/{method}": {
    /** Renew the signature method */
    post: operations["sign_file-sign-renew"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/uuid/{uuid}/code": {
    /** Get code to sign the document using UUID */
    post: operations["sign_file-get-code-using-uuid"];
  };
  "/ocs/v2.php/apps/libresign/api/{apiVersion}/sign/file_id/{fileId}/code": {
    /** Get code to sign the document using FileID */
    post: operations["sign_file-get-code-using-file-id"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    OCSMeta: {
      status: string;
      statuscode: number;
      message?: string;
      totalitems?: string;
      itemsperpage?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /** Get a demo PDF file to be used by test purpose */
  "develop-pdf": {
    responses: {
      /** @description PDF returned */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Debug mode not enabled */
      404: {
        content: never;
      };
    };
  };
  /** Index page */
  "page-index": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Index page to authenticated users
   * @description This router is used to be possible render pages with /f/, is a workaround at frontend side to identify pages with authenticated accounts
   */
  "page-indexf": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Incomplete page */
  "page-incomplete": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Sign page to authenticated signer with the path of file
   * @description The path is used only by frontend
   */
  "page-signf-path-extra": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
        path: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Sign page to authenticated signer */
  "page-signf": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Main page to authenticated signer with a path
   * @description The path is used only by frontend
   */
  "page-indexf-path-front": {
    parameters: {
      path: {
        path: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Use UUID of user to get PDF */
  "page-get-pdf-file": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Show validation page */
  "page-reset-password": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Incomplete page in full screen */
  "page-incompletep": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Sign page to authenticated signer
   * @description The path is used only by frontend
   */
  "page-sign": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Sign page to authenticated signer
   * @description The path is used only by frontend
   */
  "page-sign-extra": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
        path: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Show signature page */
  "page-sign-account-file": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Show signature page */
  "page-sign-account-file-extra": {
    parameters: {
      path: {
        /** @description Sign request uuid */
        uuid: string;
        path: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Show validation page */
  "page-validation": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Show validation page
   * @description The path is used only by frontend
   */
  "page-validation-file-with-short-url": {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description Redirected to validation page */
      303: {
        headers: {
          Location?: string;
        };
        content: never;
      };
    };
  };
  /** Show validation page for a specific file UUID */
  "page-validation-file": {
    parameters: {
      path: {
        /** @description File uuid */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Use UUID of file to get PDF */
  "page-get-pdf": {
    parameters: {
      path: {
        /** @description File uuid */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description File not found */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Create account to sign a document */
  "account-create-to-sign": {
    parameters: {
      query: {
        /** @description email to the new account */
        email: string;
        /** @description the password to then new account */
        password: string;
        /** @description The password to create certificate */
        signPassword?: string | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Sign request uuid to allow account creation */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            message: string;
            action: string;
            pdf: {
              url: string;
            };
            filename: string;
            description: string;
          };
        };
      };
      /** @description Validation page not accessible if unauthenticated */
      422: {
        content: {
          "application/json": {
            message: string;
            action: string;
          };
        };
      };
    };
  };
  /**
   * Who am I
   * @description Validates API access data and returns the authenticated user's data.
   */
  "account-me": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            account: {
              uuid: string;
              emailAddress: string;
              displayName: string;
            };
            settings: Record<string, never>;
          };
        };
      };
      /** @description Invalid user or password */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Upload PFX file */
  "account-upload-pfx": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate saved with success */
      202: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description No file provided or other problem with provided file */
      400: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Delete PFX file */
  "account-delete-pfx": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate deleted with success */
      202: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /**
   * Update PFX file
   * @description Used to change the password of PFX file
   */
  "account-update-pfx-password": {
    parameters: {
      query: {
        /** @description Current password */
        current: string;
        /** @description New password */
        new: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate saved with success */
      202: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description No file provided or other problem with provided file */
      400: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Read content of PFX file */
  "account-read-pfx-data": {
    parameters: {
      query: {
        /** @description password of PFX file to decrypt the file and return his content */
        password: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate saved with success */
      202: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description No file provided or other problem with provided file */
      400: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update the account phone number */
  "account-update-settings": {
    parameters: {
      query?: {
        /** @description the phone number to be defined. If null will remove the phone number */
        phone?: string | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Settings saved */
      202: {
        content: {
          "application/json": {
            data: {
              userId: string;
              phone: string;
              message: string;
            };
          };
        };
      };
      /** @description Invalid data to update phone number */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create PFX file using self-signed certificate */
  "account-signature-generate": {
    parameters: {
      query: {
        /** @description The password that will be used to encrypt the certificate file */
        signPassword: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Settings saved */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failure to create PFX file */
      401: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** List account files of authenticated account */
  "account-account-file-list-to-owner": {
    parameters: {
      query?: {
        /** @description Filter params */
        filter?: string;
        /** @description the number of page to return */
        page?: number | null;
        /** @description Total of elements to return */
        length?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate saved with success */
      202: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description No file provided or other problem with provided file */
      400: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Add files to account profile */
  "account-add-files": {
    parameters: {
      query: {
        /** @description the list of files to add to profile */
        files: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate saved with success */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description No file provided or other problem with provided file */
      401: {
        content: {
          "application/json": {
            messages: {
              file: string | null;
              type: string | null;
              message: string;
            };
          };
        };
      };
    };
  };
  /** Delete file from account */
  "account-delete-file": {
    parameters: {
      query: {
        /** @description the nodeId of file to be delete */
        nodeId: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description File deleted with success */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failure to delete file from account */
      401: {
        content: {
          "application/json": {
            messages: Record<string, never>;
          };
        };
      };
    };
  };
  /** List account files that need to be approved */
  "account-account-file-list-to-approval": {
    parameters: {
      query?: {
        /** @description Filter params */
        filter?: string;
        /** @description the number of page to return */
        page?: number | null;
        /** @description Total of elements to return */
        length?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Account not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /**
   * Send a file
   * @description Send a new file to Nextcloud and return the fileId to request to sign usign fileId
   */
  "file-save": {
    parameters: {
      query: {
        /** @description File to save */
        file: string;
        /** @description The name of file to sign */
        name?: string;
        /** @description Settings of signature request */
        settings?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failed to save data */
      422: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** List account files that need to be approved */
  "file-list": {
    parameters: {
      query?: {
        /** @description the number of page to return */
        page?: number | null;
        /** @description Total of elements to return */
        length?: number | null;
        /** @description Filter params */
        filter?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Return the thumbnail of a LibreSign file */
  "file-get-thumbnail": {
    parameters: {
      query?: {
        /** @description Width of generated file */
        x?: number;
        /** @description Height of generated file */
        y?: number;
        /** @description Crop, boolean value, default false */
        a?: 0 | 1;
        /** @description Force to generate a new thumbnail */
        forceIcon?: 0 | 1;
        /** @description To force a given mimetype for the file */
        mode?: string;
        /** @description If we have no preview enabled, we can redirect to the mime icon if any */
        mimeFallback?: 0 | 1;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description The nodeId of document */
        nodeId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Validate a file
   * @description Validate a file returning file data.
   */
  "file-validate": {
    parameters: {
      query?: {
        /** @description The type of identifier could be Uuid or FileId */
        type?: string | null;
        /** @description The identifier value, could be string or integer, if UUID will be a string, if FileId will be an integer */
        identifier?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Validate a file using Uuid
   * @description Validate a file returning file data.
   */
  "file-validate-uuid": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description The UUID of the LibreSign file */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Validate a file using FileId
   * @description Validate a file returning file data.
   */
  "file-validate-file-id": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description The identifier value of the LibreSign file */
        fileId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Create visible element
   * @description Create visible element of a specific file
   */
  "file_element-post": {
    parameters: {
      query: {
        /** @description Id of sign request */
        signRequestId: number;
        /** @description ID of visible element. Each element has an ID that is returned on validation endpoints. */
        elementId?: number | null;
        /** @description The type of element to create, sginature, sinitial, date, datetime, text */
        type?: string;
        /** @description Metadata of visible elements to associate with the document */
        metadata?: string;
        /** @description Coortinates of a visible element on PDF */
        coordinates?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failure when create visible element */
      404: {
        content: {
          "application/json": {
            errors: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Delete visible element
   * @description Delete visible element of a specific file
   */
  "file_element-delete": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
        uuid: string;
        /** @description ID of visible element. Each element has an ID that is returned on validation endpoints. */
        elementId: number | null;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failure when delete visible element or file not found */
      404: {
        content: {
          "application/json": {
            errors: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Update visible element
   * @description Update visible element of a specific file
   */
  "file_element-patch": {
    parameters: {
      query: {
        /** @description Id of sign request */
        signRequestId: number;
        /** @description The type of element to create, sginature, sinitial, date, datetime, text */
        type?: string;
        /** @description Metadata of visible elements to associate with the document */
        metadata?: string;
        /** @description Coortinates of a visible element on PDF */
        coordinates?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
        uuid: string;
        /** @description ID of visible element. Each element has an ID that is returned on validation endpoints. */
        elementId: number | null;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failure when patch visible element */
      404: {
        content: {
          "application/json": {
            errors: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * List possible signers
   * @description Used to identify who can sign the document. The return of this endpoint is related with Administration Settiongs > LibreSign > Identify method.
   */
  "identify_account-search": {
    parameters: {
      query?: {
        /** @description search params */
        search?: string;
        /** @description the number of page to return. Default: 1 */
        page?: number | null;
        /** @description Total of elements to return. Default: 25 */
        limit?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description Certificate saved with success */
      202: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Notify a signer of a file */
  "notify-signer": {
    parameters: {
      query: {
        /** @description The identifier value of LibreSign file */
        fileId: number;
        /** @description The sign request id */
        signRequestId: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Notify signers of a file */
  "notify-signers": {
    parameters: {
      query: {
        /** @description The identifier value of LibreSign file */
        fileId: number;
        /** @description Signers data */
        signers: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            messages: Record<string, never>;
          };
        };
      };
    };
  };
  /** Dismiss a specific notification */
  "notify-notification-dismiss": {
    parameters: {
      query: {
        /** @description The sign request id */
        signRequestId: number;
        /** @description Timestamp of notification to dismiss */
        timestamp: number;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Request signature
   * @description Request that a file be signed by a group of people
   */
  "request_signature-request": {
    parameters: {
      query: {
        /** @description File object. */
        file: string;
        /** @description Collection of users who must sign the document */
        users: string;
        /** @description The name of file to sign */
        name: string;
        /** @description URL that will receive a POST after the document is signed */
        callback?: string | null;
        /** @description Numeric code of status * 0 - no signers * 1 - signed * 2 - pending */
        status?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      422: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /**
   * Updates signatures data
   * @description Is necessary to inform the UUID of the file and a list of people
   */
  "request_signature-update-sign": {
    parameters: {
      query?: {
        /** @description Collection of users who must sign the document */
        users?: string | null;
        /** @description UUID of sign request. The signer UUID is what the person receives via email when asked to sign. This is not the file UUID. */
        uuid?: string | null;
        /** @description Visible elements on document */
        visibleElements?: string | null;
        /** @description File object. */
        file?: string | null;
        /** @description Numeric code of status * 0 - no signers * 1 - signed * 2 - pending */
        status?: number | null;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized */
      422: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Sign a file using file Id */
  "sign_file-sign-using-file-id": {
    parameters: {
      query: {
        /** @description Signature method */
        method: string;
        /** @description List of visible elements */
        elements?: string;
        /** @description Identify value */
        identifyValue?: string;
        /** @description Token, commonly send by email */
        token?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Id of LibreSign file */
        fileId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            action: string;
            message: string;
            file: {
              uuid: string;
            };
          };
        };
      };
      /** @description Error */
      422: {
        content: {
          "application/json": {
            action: string;
            errors: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Delete sign request
   * @description You can only request exclusion as any sign
   */
  "request_signature-delete-all-request-signature-using-file-id": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Node id of a Nextcloud file */
        fileId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failed */
      401: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /**
   * Delete sign request
   * @description You can only request exclusion as any sign
   */
  "request_signature-delete-one-request-signature-using-file-id": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Node id of a Nextcloud file */
        fileId: number;
        /** @description The sign request id */
        signRequestId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Failed */
      401: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /**
   * Has root certificate
   * @description Checks whether the root certificate has been configured by checking the Nextcloud configuration table to see if the root certificate settings have
   */
  "setting-has-root-cert": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            hasRootCert: boolean;
          };
        };
      };
    };
  };
  /** Get signature elements */
  "signature_elements-get-signature-elements": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            elements: Record<string, never>;
          };
        };
      };
      /** @description Invalid data */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Create signature element */
  "signature_elements-create-signature-element": {
    parameters: {
      query: {
        /** @description Element object */
        elements: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            message: string;
            elements: Record<string, never>;
          };
        };
      };
      /** @description Invalid data */
      422: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get preview of signature elements of */
  "signature_elements-get-signature-element-preview": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Node id of a Nextcloud file */
        nodeId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Invalid data */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: Record<string, never>;
            };
          };
        };
      };
    };
  };
  /** Get signature element of signer */
  "signature_elements-get-signature-element": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Node id of a Nextcloud file */
        nodeId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Invalid data */
      404: {
        content: {
          "application/json": {
            ocs: {
              meta: components["schemas"]["OCSMeta"];
              data: Record<string, never>;
            };
          };
        };
      };
    };
  };
  /** Delete signature element */
  "signature_elements-delete-signature-element": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Node id of a Nextcloud file */
        nodeId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            elements: Record<string, never>;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Update signature element */
  "signature_elements-patch-signature-element": {
    parameters: {
      query?: {
        /** @description The type of signature element */
        type?: string;
        /** @description Element object */
        file?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Node id of a Nextcloud file */
        nodeId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            elements: Record<string, never>;
          };
        };
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Sign a file using file UUID */
  "sign_file-sign-using-uuid": {
    parameters: {
      query: {
        /** @description Signature method */
        method: string;
        /** @description List of visible elements */
        elements?: string;
        /** @description Identify value */
        identifyValue?: string;
        /** @description Token, commonly send by email */
        token?: string;
      };
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description UUID of LibreSign file */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            action: string;
            message: string;
            file: {
              uuid: string;
            };
          };
        };
      };
      /** @description Error */
      422: {
        content: {
          "application/json": {
            action: string;
            errors: Record<string, never>;
          };
        };
      };
    };
  };
  /** Renew the signature method */
  "sign_file-sign-renew": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        uuid: string;
        /** @description Signature method */
        method: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get code to sign the document using UUID */
  "sign_file-get-code-using-uuid": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description UUID of LibreSign file */
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Error */
      422: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
  /** Get code to sign the document using FileID */
  "sign_file-get-code-using-file-id": {
    parameters: {
      header: {
        /** @description Required to be true for the API request to pass */
        "OCS-APIRequest": boolean;
      };
      path: {
        apiVersion: "v1";
        /** @description Id of LibreSign file */
        fileId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      /** @description Error */
      422: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
    };
  };
};
